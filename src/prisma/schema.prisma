datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

generator client {
    provider      = "prisma-client-js"
    binaryTargets = "native"
}

generator zod {
    provider                         = "npx zod-prisma-types"
    useMultipleFiles                 = false
    writeBarrelFiles                 = false
    createInputTypes                 = false
    createModelTypes                 = true
    addInputTypeValidation           = false
    addIncludeType                   = true
    addSelectType                    = true
    validateWhereUniqueInput         = false
    createOptionalDefaultValuesTypes = true
    createRelationValuesTypes        = false
    createPartialTypes               = false
    useDefaultValidators             = false
    coerceDate                       = false
    writeNullishInModelTypes         = true
}

enum Role {
    ADMIN
    USER
}

/// @zod.import(["import {EmailExists} from '@/actions/UserAuthActions'"])
model User {
    id            String   @id @default(uuid()) /// @zod.string
    name          String /// @zod.string.max(255).min(1, {message: "Name is required"})
    email         String   @unique /// @zod.custom.use(z.string().email().refine(async (val) => !(await EmailExists(val)), { message: 'Email already exists' }))
    emailVerified Boolean  @default(false)
    password      String /// @zod.string.min(8, {message: "Password must be at least 8 characters long"}).max(255, {message: "Password must be less than 255 characters long"})
    avatar        String   @default("https://source.unsplash.com/random/200x200?sig=1") /// @zod.string
    designation   String? /// @zod.string
    role          String   @default("ADMIN")
    permissions   String[] /// @zod.string
}

enum LocationPreferenceENUM {
    REMOTE
    ONSITE
    BOTH
}

enum EmploymentTypeENUM {
    FULL_TIME
    PART_TIME
    CONTRACT
    INTERNSHIP
    TEMPORARY
}

enum ExperienceLevel {
    BEGINNER
    INTERMEDIATE
    EXPERT
}

enum MinimumQualification {
    HIGH_SCHOOL
    ASSOCIATE
    BACHELOR
    MASTER
    DOCTORATE
    NONE
}

enum QuestionType {
    TEXT
    MULTIPLE_CHOICE
    SINGLE_CHOICE
}

enum SalaryType {
    FIXED
    RANGE
}

enum SalaryInterval {
    HOURLY
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
}

enum Currency {
    EUR
    USD
    GBP
    INR
    AUD
    CAD
    SGD
    JPY
}

enum IndustryENUM {
    Software_Development
    Medical_and_Healthcare
    Financial_Services
    Retail_and_Ecommerce
    Manufacturing
    Education_and_Training
    Information_Technology
    Real_Estate
    Animation_and_Graphic_Design
    Event_Planning_and_Services
    Insurance
    Architecture_and_Planning
    Renewable_Energy
    Biotechnology
    Art_and_Crafts
}

model Job {
    id                   String                  @id @default(uuid())
    industry             IndustryENUM
    title                String /// @zod.custom.use(z.string().min(1, { message: "Job title is required" }))
    location             String /// @zod.custom.use(z.string().min(1, "Location is required"))
    locationPreference   LocationPreferenceENUM
    type                 String /// @zod.custom.use(z.string().min(1, "Job type is required"))
    employmentType       EmploymentTypeENUM
    experienceLevel      ExperienceLevel
    minimumQualification MinimumQualification
    visaSponsorship      Boolean /// @zod.custom.use(z.coerce.boolean())
    salaryType           SalaryType
    salaryMin            Int /// @zod.custom.use(z.coerce.number().gte(1, "Salary is required"))
    salaryMax            Int? /// @zod.custom.use(z.coerce.number())
    salaryCurrency       Currency
    salaryInterval       SalaryInterval
    facilities           String[]
    description          String /// @zod.custom.use(z.string().min(1, "Job description is required"))
    responsibilities     String /// @zod.string.min(1, {message: "Job requirements are required"})
    requirements         String /// @zod.string.min(1, {message: "Job requirements are required"})
    tags                 String[] /// @zod.string.array
    createdAt            DateTime                @default(now())
    updatedAt            DateTime                @updatedAt
    questions            JobApplicantQuestions[]
    faqs                 JobFAQ[]
    image                String?
    hiringProcess        JobHiringProcess[]
}

model JobHiringProcess {
    id          String  @id @default(uuid())
    job         Job     @relation(fields: [jobId], references: [id])
    jobId       String /// @zod.custom.omit([model, input])
    title       String /// @zod.string.min(1, {message: "Title is required"})
    description String?
}

model JobApplicantQuestions {
    id           String       @id @default(uuid())
    job          Job          @relation(fields: [jobId], references: [id])
    jobId        String /// @zod.custom.omit([model, input])
    question     String /// @zod.custom.use(z.string().min(1, "Question is required"))
    questionType QuestionType
    options      String[] /// @zod.string.array
}

model JobFAQ {
    id       String @id @default(uuid())
    job      Job    @relation(fields: [jobId], references: [id])
    jobId    String /// @zod.custom.omit([model, input])
    question String /// @zod.custom.use(z.string().min(1, "Question is required"))
    answer   String /// @zod.custom.use(z.string().min(1, "Answer is required"))
}
